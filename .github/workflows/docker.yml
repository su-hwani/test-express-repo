name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Create .env file
        run: echo "DOCKER_IMAGE_TAG=latest" > .env
      
      # - name: build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name:latest

      - name: Build and Push Docker Image
        run: |
          DOCKER_IMAGE_TAG=$(cat .env | grep DOCKER_IMAGE_TAG | cut -d'=' -f2)
          docker build -t ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.NCP_CONTAINER_REPO }}:${DOCKER_IMAGE_TAG} .
          docker push ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.NCP_CONTAINER_REPO }}:${DOCKER_IMAGE_TAG}

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: Set up Docker Compose
        run: |
          sudo rm /usr/local/bin/docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Node.js for Deploy
        uses: actions/setup-node@v3
        with:
          node-version: 20  # 이 부분을 업데이트합니다.

      - name: Deploy with Docker Compose
        run: |
          docker-compose up -d


  pull_from_registry:
    runs-on: ubuntu-latest

    needs: deploy

    steps:
      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          password: ${{ secrets.DEV_PASSWORD }}
          port: ${{ secrets.DEV_PORT }}
          script: |
            # .env 파일이 없으면 생성
            if [ ! -f .env ]; then
              echo "DOCKER_IMAGE_TAG=latest" > .env
            fi

            # DOCKER_IMAGE_TAG 값을 .env 파일에서 읽어오기
            export DOCKER_IMAGE_TAG=$(cat .env | grep DOCKER_IMAGE_TAG | cut -d'=' -f2)

            # .env 파일에 DOCKER_IMAGE_TAG 설정
            echo "DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}" > .env

            # Docker 이미지 레지스트리에서 가져오기
            echo "Pulling latest image from registry..."
            docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/${{ secrets.NCP_CONTAINER_REPO }}:${DOCKER_IMAGE_TAG}


      - name: Set up Docker Compose
        run: |
          sudo rm /usr/local/bin/docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Node.js for Deploy
        uses: actions/setup-node@v3
        with:
          node-version: 20  # 이 부분을 업데이트합니다.
      
      - name: Deploy with Docker Compose
        run: |
          docker-compose up -d

# script: |
#   docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name
#   docker stop $(docker ps -a -q)
#   docker rm $(docker ps -a -q)
#   docker run -d -p 3000:80 --env-file ${{ secrets.ENV_FILENAME_FRONTEND }} ${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name
#   docker image prune -f
